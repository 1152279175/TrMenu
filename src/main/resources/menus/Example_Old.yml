#
# Locale: zn_CN
#
# @author Arasple
# @date 2020.2.29 11:46
#
# 本文件是 TrMenu Pro 的标准示例菜单,
# 包含配置节点、功能演示等, 以及中文注解，方便你快速熟悉菜单写法
#
# 时间单位：Ticks, (20 ticks = 1 sec)
# (String)：只能写一行字符串
# (String/List)：可以写单行或多行字符串
# (Optional)：该节点是可选的，具有 DefValue 默认值，可以不配置. 如果没有该标记则为必填项

# 容器的显示标题 (Optional) (String/List)
Title:
  - 'Example GUI'
  - 'With animated titles'

# 标题刷新周期 (Optional & DefValue: -1)
Title-Update: 20

# 菜单的布局
# 支持单个字符或用 [] 包裹的字符串
#  '[#######]' 定义 9 个图标的写法会冲突
#
Layout:
  - - '########{Close}'
    - ''
    - ''
    - ''
    - ''
    - '########<Next>'
  - - '########<Close>'
    - ''
    - ''
    - ''
    - ''
    - '<Pre>########<Next>'
  - - '########<Close>'
    - ''
    - ''
    - ''
    - ''
    - '<Pre>########'

# 拓展玩家背包 4*9 槽位
# 若未启用 Hide-Player-Inventory, 图标将会占替玩家容器内的物品
PlayerInventory:
  - '---------'
  - ''
  - ''
  - ''

# 默认参数 (Optional) (String)
# 例如: trmenu pro, 则默认参数为 [trmenu,pro], 如果只提供了 [trmenu], 也将会自动补全第二个参数 pro
Default-Arguments: ''

# 若启用，打开菜单后将隐藏玩家背包的物品
Hide-Player-Inventory: false

# 容器最低有效交互间隔，防止频繁点击 (Optional & DefValue: 5)
Click-Delay: 10

# 绑定到开启命令 (Optional) (String/List) (Regex support)
Open-Commands: '(?i)(example(Gui|Menu)?)'

# 绑定到识别物品开启 (Optional) (String/List)
# 写物品特征匹配式
Open-Item: 'mat:player_head,amt:5,lore:CUSTOMLORE,lore:CUSTOMLORE2'

# 开启该菜单前将检测的条件表达式 (Optional) (String)
# 变量 {0} -> MenuOpenEvent.Reason
Open-Requirement: 'player.hasPermission("trmenu.use") || "{reason}" != "PLAYER_COMMAND"'
# 若满足上方条件，打开菜单后将执行的动作
Open-Actions: 'sound: BLOCK_NOTE_BLOCK_PLING-1-1'
# 若不满足上方条件，将无法打开菜单并执行下面的动作 (Optional) (String/List)
Open-Deny-Actions: [
  'sound: ENTITY_ITEM_BREAK-1-0',
  'tell: &c你没有访问该菜单的权限 &6trmenu.use'
]

# 关闭该菜单后将检测的条件表达式 (Optional) (String)
Close-Requirement: ''
# 若满足上方条件，关闭菜单后将执行的动作
Close-Actions: 'sound: BLOCK_CHEST_CLOSE-1-0'
# 若不满足上方条件，将无法关闭菜单并执行下面的动作 (Optional) (String/List)
Close-Deny-Actions: ''

# 菜单保持打开状态需要的条件 (Optional) (String)
Keep-Open-Requirement: ''
# 每次检测周期，若满足上方条件，将执行的动作 (Optional) (String/List)
Keep-Open-Actions: ''
# 每次检测周期，若不满足上方条件，将将自动关闭菜单并执行下面的动作 (Optional) (String/List) (Before Close-Actions)
Keep-Open-Deny-Actions: ''

# 菜单的图标显示
Icons:
  # 图标 ID/Key，支持在 Layout 中快捷布局
  Close:
    # 刷新优先级图标的周期 (Optional)
    refresh: 20
    # 图标物品更新周期 (Optional) (Int, List<Int>, MemorySection)
    # 顺序：材质，名称，Lore，槽位
    update: [-1,3,20]
    # 物品的材质
    material: '<head:%player_name%>'
    # 物品显示的名称 (Optional) (String/List)
    name: ['&3Tr&bMenu','&bTr&3Menu']
    # 物品 Lore 描述 (Optional) (String/List)
    lore:
      - - '普通的一条lore'
        - '动态频率也不同于'
        - '名称哦'
      - - '这是第二组 Lore'
        - '我滴天'
    # 支持超多种写法识别，凭感觉盲写一般都不会错！
    # click "_list" 无意义，只是提供写法示例，可以直接 action/click

    click_list:
      left,right_click:
        - condition: 'condition'
          list: 'tell:66'

    click_just_list:
      - 'tell: action 1'
      - 'tell: action 2'

    click_section:
      left,right:
        # Action Packs
        - condition: ''
          list: ''
      middle:
        - ''
        - ''

    icons:
      - condition: 'equals.%player_name%.Arasple'
        priority: 5
        name: 'XXX'
        lore: 'XXX'
        click: xxx

#
# 自定义菜单变量、脚本，仅限该菜单使用
# 也可以被当作该菜单的 “自定义配置节点”
# \$\{(.*?)\}
#
# 用法例如 ${health}
# 带参例如 ${balance_ADD_100}
# 动作中使用：'js: ${list}'
Scripts:
  balance: |-
    var balance = "%vault_eco_balance%"
    function run(){
      if (args[0] == "ADD"){
        return balance + args[1]
      }else {
        return balance - args[1]
      }
    }
    run()
  health: |-
    function math(){
      return player.getHealth()
    }
    math()
